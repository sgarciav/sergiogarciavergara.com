// File generated by ChatGPT
document.addEventListener("DOMContentLoaded", () => {
  // Create a TOC container and add it to the right side of the webpage
  const tocContainer = document.createElement("div");
  tocContainer.classList.add("toc-container"); // Add class for custom styling
  document.body.appendChild(tocContainer);

  const tocList = document.createElement("ul");
  tocList.classList.add("toc-list");
  tocContainer.appendChild(tocList);

  // Function to create a TOC item
  const createTOCItem = (text, id, level) => {
    const listItem = document.createElement("li");
    listItem.classList.add("toc-item", `toc-level-${level}`);
    const link = document.createElement("a");
    link.textContent = text;
    link.href = `#${id}`;
    listItem.appendChild(link);
    return listItem;
  };

  // Get headers and add to TOC
  var count = 0;
  const headers = document.querySelectorAll("h1, h2, h3, h4, h5, h6");
  headers.forEach(header => {
    // const headerText = header.textContent.trim();
    // if (headerText === "Contact me") return;
    count = count + 1; // Do not add the "Contact me" tag and Webpage title
    if (count < 3) { return; }
    const level = parseInt(header.tagName.charAt(1)) - 1;
    const id = header.textContent.replace(/\s+/g, "-").toLowerCase();
    header.id = id;
    const tocItem = createTOCItem(header.textContent, id, level);
    tocList.appendChild(tocItem);
  });

  // Highlight TOC item on scroll
  document.addEventListener("scroll", () => {
    let currentHeader = null;
    headers.forEach(header => {
      const rect = header.getBoundingClientRect();
      if (rect.top <= 10 && rect.bottom >= 10) {
        currentHeader = header;
      }
    });

    if (currentHeader) {
      const currentId = currentHeader.id;
      tocList.querySelectorAll("a").forEach(link => {
        link.classList.toggle("active", link.getAttribute("href").slice(1) === currentId);
      });
    }
  });
});
